#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kask.DAL.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AESDatabase")]
	public partial class AESDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicant(Applicant instance);
    partial void UpdateApplicant(Applicant instance);
    partial void DeleteApplicant(Applicant instance);
    partial void Insertwebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Updatewebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Deletewebpages_UsersInRole(webpages_UsersInRole instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertApplied(Applied instance);
    partial void UpdateApplied(Applied instance);
    partial void DeleteApplied(Applied instance);
    partial void InsertAssociate(Associate instance);
    partial void UpdateAssociate(Associate instance);
    partial void DeleteAssociate(Associate instance);
    partial void InsertEducation(Education instance);
    partial void UpdateEducation(Education instance);
    partial void DeleteEducation(Education instance);
    partial void InsertEmployer(Employer instance);
    partial void UpdateEmployer(Employer instance);
    partial void DeleteEmployer(Employer instance);
    partial void InsertEmployment(Employment instance);
    partial void UpdateEmployment(Employment instance);
    partial void DeleteEmployment(Employment instance);
    partial void InsertExpertise(Expertise instance);
    partial void UpdateExpertise(Expertise instance);
    partial void DeleteExpertise(Expertise instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertJobOpening(JobOpening instance);
    partial void UpdateJobOpening(JobOpening instance);
    partial void DeleteJobOpening(JobOpening instance);
    partial void InsertJobRequirement(JobRequirement instance);
    partial void UpdateJobRequirement(JobRequirement instance);
    partial void DeleteJobRequirement(JobRequirement instance);
    partial void InsertReference(Reference instance);
    partial void UpdateReference(Reference instance);
    partial void DeleteReference(Reference instance);
    partial void InsertSchool(School instance);
    partial void UpdateSchool(School instance);
    partial void DeleteSchool(School instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    partial void InsertStoreManager(StoreManager instance);
    partial void UpdateStoreManager(StoreManager instance);
    partial void DeleteStoreManager(StoreManager instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void Insertwebpages_Membership(webpages_Membership instance);
    partial void Updatewebpages_Membership(webpages_Membership instance);
    partial void Deletewebpages_Membership(webpages_Membership instance);
    partial void Insertwebpages_OAuthMembership(webpages_OAuthMembership instance);
    partial void Updatewebpages_OAuthMembership(webpages_OAuthMembership instance);
    partial void Deletewebpages_OAuthMembership(webpages_OAuthMembership instance);
    partial void Insertwebpages_Role(webpages_Role instance);
    partial void Updatewebpages_Role(webpages_Role instance);
    partial void Deletewebpages_Role(webpages_Role instance);
    #endregion
		
		public AESDatabaseDataContext() : 
				base(global::Kask.DAL.Properties.Settings.Default.AESDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AESDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AESDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AESDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AESDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Applicant> Applicants
		{
			get
			{
				return this.GetTable<Applicant>();
			}
		}
		
		public System.Data.Linq.Table<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this.GetTable<webpages_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Applied> Applieds
		{
			get
			{
				return this.GetTable<Applied>();
			}
		}
		
		public System.Data.Linq.Table<Associate> Associates
		{
			get
			{
				return this.GetTable<Associate>();
			}
		}
		
		public System.Data.Linq.Table<Education> Educations
		{
			get
			{
				return this.GetTable<Education>();
			}
		}
		
		public System.Data.Linq.Table<Employer> Employers
		{
			get
			{
				return this.GetTable<Employer>();
			}
		}
		
		public System.Data.Linq.Table<Employment> Employments
		{
			get
			{
				return this.GetTable<Employment>();
			}
		}
		
		public System.Data.Linq.Table<Expertise> Expertises
		{
			get
			{
				return this.GetTable<Expertise>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<JobOpening> JobOpenings
		{
			get
			{
				return this.GetTable<JobOpening>();
			}
		}
		
		public System.Data.Linq.Table<JobRequirement> JobRequirements
		{
			get
			{
				return this.GetTable<JobRequirement>();
			}
		}
		
		public System.Data.Linq.Table<Reference> References
		{
			get
			{
				return this.GetTable<Reference>();
			}
		}
		
		public System.Data.Linq.Table<School> Schools
		{
			get
			{
				return this.GetTable<School>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<StoreManager> StoreManagers
		{
			get
			{
				return this.GetTable<StoreManager>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<webpages_Membership> webpages_Memberships
		{
			get
			{
				return this.GetTable<webpages_Membership>();
			}
		}
		
		public System.Data.Linq.Table<webpages_OAuthMembership> webpages_OAuthMemberships
		{
			get
			{
				return this.GetTable<webpages_OAuthMembership>();
			}
		}
		
		public System.Data.Linq.Table<webpages_Role> webpages_Roles
		{
			get
			{
				return this.GetTable<webpages_Role>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Applicant")]
	public partial class Applicant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Applicant_ID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _SSN;
		
		private string _Gender;
		
		private string _ApplicantAddress;
		
		private string _Phone;
		
		private string _NameAlias;
		
		private EntitySet<Applied> _Applieds;
		
		private EntitySet<Associate> _Associates;
		
		private EntitySet<Education> _Educations;
		
		private EntitySet<Employment> _Employments;
		
		private EntitySet<Expertise> _Expertises;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicant_IDChanging(int value);
    partial void OnApplicant_IDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSSNChanging(string value);
    partial void OnSSNChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnApplicantAddressChanging(string value);
    partial void OnApplicantAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnNameAliasChanging(string value);
    partial void OnNameAliasChanged();
    #endregion
		
		public Applicant()
		{
			this._Applieds = new EntitySet<Applied>(new Action<Applied>(this.attach_Applieds), new Action<Applied>(this.detach_Applieds));
			this._Associates = new EntitySet<Associate>(new Action<Associate>(this.attach_Associates), new Action<Associate>(this.detach_Associates));
			this._Educations = new EntitySet<Education>(new Action<Education>(this.attach_Educations), new Action<Education>(this.detach_Educations));
			this._Employments = new EntitySet<Employment>(new Action<Employment>(this.attach_Employments), new Action<Employment>(this.detach_Employments));
			this._Expertises = new EntitySet<Expertise>(new Action<Expertise>(this.attach_Expertises), new Action<Expertise>(this.detach_Expertises));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Applicant_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Applicant_ID
		{
			get
			{
				return this._Applicant_ID;
			}
			set
			{
				if ((this._Applicant_ID != value))
				{
					this.OnApplicant_IDChanging(value);
					this.SendPropertyChanging();
					this._Applicant_ID = value;
					this.SendPropertyChanged("Applicant_ID");
					this.OnApplicant_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(1)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantAddress", DbType="VarChar(255)")]
		public string ApplicantAddress
		{
			get
			{
				return this._ApplicantAddress;
			}
			set
			{
				if ((this._ApplicantAddress != value))
				{
					this.OnApplicantAddressChanging(value);
					this.SendPropertyChanging();
					this._ApplicantAddress = value;
					this.SendPropertyChanged("ApplicantAddress");
					this.OnApplicantAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameAlias", DbType="VarChar(255)")]
		public string NameAlias
		{
			get
			{
				return this._NameAlias;
			}
			set
			{
				if ((this._NameAlias != value))
				{
					this.OnNameAliasChanging(value);
					this.SendPropertyChanging();
					this._NameAlias = value;
					this.SendPropertyChanged("NameAlias");
					this.OnNameAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Applied", Storage="_Applieds", ThisKey="Applicant_ID", OtherKey="Applicant_ID")]
		public EntitySet<Applied> Applieds
		{
			get
			{
				return this._Applieds;
			}
			set
			{
				this._Applieds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Associate", Storage="_Associates", ThisKey="Applicant_ID", OtherKey="Applicant_ID")]
		public EntitySet<Associate> Associates
		{
			get
			{
				return this._Associates;
			}
			set
			{
				this._Associates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Education", Storage="_Educations", ThisKey="Applicant_ID", OtherKey="Applicant_ID")]
		public EntitySet<Education> Educations
		{
			get
			{
				return this._Educations;
			}
			set
			{
				this._Educations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Employment", Storage="_Employments", ThisKey="Applicant_ID", OtherKey="Applicant_ID")]
		public EntitySet<Employment> Employments
		{
			get
			{
				return this._Employments;
			}
			set
			{
				this._Employments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Expertise", Storage="_Expertises", ThisKey="Applicant_ID", OtherKey="Applicant_ID")]
		public EntitySet<Expertise> Expertises
		{
			get
			{
				return this._Expertises;
			}
			set
			{
				this._Expertises.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applieds(Applied entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_Applieds(Applied entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_Associates(Associate entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_Associates(Associate entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_Employments(Employment entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_Employments(Employment entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_Expertises(Expertise entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_Expertises(Expertise entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_UsersInRoles")]
	public partial class webpages_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<webpages_Role> _webpages_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public webpages_UsersInRole()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._webpages_Role = default(EntityRef<webpages_Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._webpages_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_webpages_UsersInRole", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.webpages_UsersInRoles.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.webpages_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="webpages_Role_webpages_UsersInRole", Storage="_webpages_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public webpages_Role webpages_Role
		{
			get
			{
				return this._webpages_Role.Entity;
			}
			set
			{
				webpages_Role previousValue = this._webpages_Role.Entity;
				if (((previousValue != value) 
							|| (this._webpages_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._webpages_Role.Entity = null;
						previousValue.webpages_UsersInRoles.Remove(this);
					}
					this._webpages_Role.Entity = value;
					if ((value != null))
					{
						value.webpages_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("webpages_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Application_ID;
		
		private string _ApplicationStatus;
		
		private string _SalaryExpectation;
		
		private System.Nullable<byte> _FullTime;
		
		private System.Nullable<byte> _AvailableForDays;
		
		private System.Nullable<byte> _AvailableForEvenings;
		
		private System.Nullable<byte> _AvailableForWeekends;
		
		private System.Nullable<System.TimeSpan> _MondayFrom;
		
		private System.Nullable<System.TimeSpan> _TuesdayFrom;
		
		private System.Nullable<System.TimeSpan> _WednesdayFrom;
		
		private System.Nullable<System.TimeSpan> _ThursdayFrom;
		
		private System.Nullable<System.TimeSpan> _FridayFrom;
		
		private System.Nullable<System.TimeSpan> _SaturdayFrom;
		
		private System.Nullable<System.TimeSpan> _SundayFrom;
		
		private System.Nullable<System.TimeSpan> _MondayTo;
		
		private System.Nullable<System.TimeSpan> _TuesdayTo;
		
		private System.Nullable<System.TimeSpan> _WednesdayTo;
		
		private System.Nullable<System.TimeSpan> _ThursdayTo;
		
		private System.Nullable<System.TimeSpan> _FridayTo;
		
		private System.Nullable<System.TimeSpan> _SaturdayTo;
		
		private System.Nullable<System.TimeSpan> _SundayTo;
		
		private EntitySet<Applied> _Applieds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplication_IDChanging(int value);
    partial void OnApplication_IDChanged();
    partial void OnApplicationStatusChanging(string value);
    partial void OnApplicationStatusChanged();
    partial void OnSalaryExpectationChanging(string value);
    partial void OnSalaryExpectationChanged();
    partial void OnFullTimeChanging(System.Nullable<byte> value);
    partial void OnFullTimeChanged();
    partial void OnAvailableForDaysChanging(System.Nullable<byte> value);
    partial void OnAvailableForDaysChanged();
    partial void OnAvailableForEveningsChanging(System.Nullable<byte> value);
    partial void OnAvailableForEveningsChanged();
    partial void OnAvailableForWeekendsChanging(System.Nullable<byte> value);
    partial void OnAvailableForWeekendsChanged();
    partial void OnMondayFromChanging(System.Nullable<System.TimeSpan> value);
    partial void OnMondayFromChanged();
    partial void OnTuesdayFromChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTuesdayFromChanged();
    partial void OnWednesdayFromChanging(System.Nullable<System.TimeSpan> value);
    partial void OnWednesdayFromChanged();
    partial void OnThursdayFromChanging(System.Nullable<System.TimeSpan> value);
    partial void OnThursdayFromChanged();
    partial void OnFridayFromChanging(System.Nullable<System.TimeSpan> value);
    partial void OnFridayFromChanged();
    partial void OnSaturdayFromChanging(System.Nullable<System.TimeSpan> value);
    partial void OnSaturdayFromChanged();
    partial void OnSundayFromChanging(System.Nullable<System.TimeSpan> value);
    partial void OnSundayFromChanged();
    partial void OnMondayToChanging(System.Nullable<System.TimeSpan> value);
    partial void OnMondayToChanged();
    partial void OnTuesdayToChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTuesdayToChanged();
    partial void OnWednesdayToChanging(System.Nullable<System.TimeSpan> value);
    partial void OnWednesdayToChanged();
    partial void OnThursdayToChanging(System.Nullable<System.TimeSpan> value);
    partial void OnThursdayToChanged();
    partial void OnFridayToChanging(System.Nullable<System.TimeSpan> value);
    partial void OnFridayToChanged();
    partial void OnSaturdayToChanging(System.Nullable<System.TimeSpan> value);
    partial void OnSaturdayToChanged();
    partial void OnSundayToChanging(System.Nullable<System.TimeSpan> value);
    partial void OnSundayToChanged();
    #endregion
		
		public Application()
		{
			this._Applieds = new EntitySet<Applied>(new Action<Applied>(this.attach_Applieds), new Action<Applied>(this.detach_Applieds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Application_ID
		{
			get
			{
				return this._Application_ID;
			}
			set
			{
				if ((this._Application_ID != value))
				{
					this.OnApplication_IDChanging(value);
					this.SendPropertyChanging();
					this._Application_ID = value;
					this.SendPropertyChanged("Application_ID");
					this.OnApplication_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationStatus", DbType="VarChar(10)")]
		public string ApplicationStatus
		{
			get
			{
				return this._ApplicationStatus;
			}
			set
			{
				if ((this._ApplicationStatus != value))
				{
					this.OnApplicationStatusChanging(value);
					this.SendPropertyChanging();
					this._ApplicationStatus = value;
					this.SendPropertyChanged("ApplicationStatus");
					this.OnApplicationStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryExpectation", DbType="VarChar(50)")]
		public string SalaryExpectation
		{
			get
			{
				return this._SalaryExpectation;
			}
			set
			{
				if ((this._SalaryExpectation != value))
				{
					this.OnSalaryExpectationChanging(value);
					this.SendPropertyChanging();
					this._SalaryExpectation = value;
					this.SendPropertyChanged("SalaryExpectation");
					this.OnSalaryExpectationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullTime", DbType="TinyInt")]
		public System.Nullable<byte> FullTime
		{
			get
			{
				return this._FullTime;
			}
			set
			{
				if ((this._FullTime != value))
				{
					this.OnFullTimeChanging(value);
					this.SendPropertyChanging();
					this._FullTime = value;
					this.SendPropertyChanged("FullTime");
					this.OnFullTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableForDays", DbType="TinyInt")]
		public System.Nullable<byte> AvailableForDays
		{
			get
			{
				return this._AvailableForDays;
			}
			set
			{
				if ((this._AvailableForDays != value))
				{
					this.OnAvailableForDaysChanging(value);
					this.SendPropertyChanging();
					this._AvailableForDays = value;
					this.SendPropertyChanged("AvailableForDays");
					this.OnAvailableForDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableForEvenings", DbType="TinyInt")]
		public System.Nullable<byte> AvailableForEvenings
		{
			get
			{
				return this._AvailableForEvenings;
			}
			set
			{
				if ((this._AvailableForEvenings != value))
				{
					this.OnAvailableForEveningsChanging(value);
					this.SendPropertyChanging();
					this._AvailableForEvenings = value;
					this.SendPropertyChanged("AvailableForEvenings");
					this.OnAvailableForEveningsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableForWeekends", DbType="TinyInt")]
		public System.Nullable<byte> AvailableForWeekends
		{
			get
			{
				return this._AvailableForWeekends;
			}
			set
			{
				if ((this._AvailableForWeekends != value))
				{
					this.OnAvailableForWeekendsChanging(value);
					this.SendPropertyChanging();
					this._AvailableForWeekends = value;
					this.SendPropertyChanged("AvailableForWeekends");
					this.OnAvailableForWeekendsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MondayFrom", DbType="Time")]
		public System.Nullable<System.TimeSpan> MondayFrom
		{
			get
			{
				return this._MondayFrom;
			}
			set
			{
				if ((this._MondayFrom != value))
				{
					this.OnMondayFromChanging(value);
					this.SendPropertyChanging();
					this._MondayFrom = value;
					this.SendPropertyChanged("MondayFrom");
					this.OnMondayFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TuesdayFrom", DbType="Time")]
		public System.Nullable<System.TimeSpan> TuesdayFrom
		{
			get
			{
				return this._TuesdayFrom;
			}
			set
			{
				if ((this._TuesdayFrom != value))
				{
					this.OnTuesdayFromChanging(value);
					this.SendPropertyChanging();
					this._TuesdayFrom = value;
					this.SendPropertyChanged("TuesdayFrom");
					this.OnTuesdayFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WednesdayFrom", DbType="Time")]
		public System.Nullable<System.TimeSpan> WednesdayFrom
		{
			get
			{
				return this._WednesdayFrom;
			}
			set
			{
				if ((this._WednesdayFrom != value))
				{
					this.OnWednesdayFromChanging(value);
					this.SendPropertyChanging();
					this._WednesdayFrom = value;
					this.SendPropertyChanged("WednesdayFrom");
					this.OnWednesdayFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThursdayFrom", DbType="Time")]
		public System.Nullable<System.TimeSpan> ThursdayFrom
		{
			get
			{
				return this._ThursdayFrom;
			}
			set
			{
				if ((this._ThursdayFrom != value))
				{
					this.OnThursdayFromChanging(value);
					this.SendPropertyChanging();
					this._ThursdayFrom = value;
					this.SendPropertyChanged("ThursdayFrom");
					this.OnThursdayFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FridayFrom", DbType="Time")]
		public System.Nullable<System.TimeSpan> FridayFrom
		{
			get
			{
				return this._FridayFrom;
			}
			set
			{
				if ((this._FridayFrom != value))
				{
					this.OnFridayFromChanging(value);
					this.SendPropertyChanging();
					this._FridayFrom = value;
					this.SendPropertyChanged("FridayFrom");
					this.OnFridayFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaturdayFrom", DbType="Time")]
		public System.Nullable<System.TimeSpan> SaturdayFrom
		{
			get
			{
				return this._SaturdayFrom;
			}
			set
			{
				if ((this._SaturdayFrom != value))
				{
					this.OnSaturdayFromChanging(value);
					this.SendPropertyChanging();
					this._SaturdayFrom = value;
					this.SendPropertyChanged("SaturdayFrom");
					this.OnSaturdayFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SundayFrom", DbType="Time")]
		public System.Nullable<System.TimeSpan> SundayFrom
		{
			get
			{
				return this._SundayFrom;
			}
			set
			{
				if ((this._SundayFrom != value))
				{
					this.OnSundayFromChanging(value);
					this.SendPropertyChanging();
					this._SundayFrom = value;
					this.SendPropertyChanged("SundayFrom");
					this.OnSundayFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MondayTo", DbType="Time")]
		public System.Nullable<System.TimeSpan> MondayTo
		{
			get
			{
				return this._MondayTo;
			}
			set
			{
				if ((this._MondayTo != value))
				{
					this.OnMondayToChanging(value);
					this.SendPropertyChanging();
					this._MondayTo = value;
					this.SendPropertyChanged("MondayTo");
					this.OnMondayToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TuesdayTo", DbType="Time")]
		public System.Nullable<System.TimeSpan> TuesdayTo
		{
			get
			{
				return this._TuesdayTo;
			}
			set
			{
				if ((this._TuesdayTo != value))
				{
					this.OnTuesdayToChanging(value);
					this.SendPropertyChanging();
					this._TuesdayTo = value;
					this.SendPropertyChanged("TuesdayTo");
					this.OnTuesdayToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WednesdayTo", DbType="Time")]
		public System.Nullable<System.TimeSpan> WednesdayTo
		{
			get
			{
				return this._WednesdayTo;
			}
			set
			{
				if ((this._WednesdayTo != value))
				{
					this.OnWednesdayToChanging(value);
					this.SendPropertyChanging();
					this._WednesdayTo = value;
					this.SendPropertyChanged("WednesdayTo");
					this.OnWednesdayToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThursdayTo", DbType="Time")]
		public System.Nullable<System.TimeSpan> ThursdayTo
		{
			get
			{
				return this._ThursdayTo;
			}
			set
			{
				if ((this._ThursdayTo != value))
				{
					this.OnThursdayToChanging(value);
					this.SendPropertyChanging();
					this._ThursdayTo = value;
					this.SendPropertyChanged("ThursdayTo");
					this.OnThursdayToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FridayTo", DbType="Time")]
		public System.Nullable<System.TimeSpan> FridayTo
		{
			get
			{
				return this._FridayTo;
			}
			set
			{
				if ((this._FridayTo != value))
				{
					this.OnFridayToChanging(value);
					this.SendPropertyChanging();
					this._FridayTo = value;
					this.SendPropertyChanged("FridayTo");
					this.OnFridayToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaturdayTo", DbType="Time")]
		public System.Nullable<System.TimeSpan> SaturdayTo
		{
			get
			{
				return this._SaturdayTo;
			}
			set
			{
				if ((this._SaturdayTo != value))
				{
					this.OnSaturdayToChanging(value);
					this.SendPropertyChanging();
					this._SaturdayTo = value;
					this.SendPropertyChanged("SaturdayTo");
					this.OnSaturdayToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SundayTo", DbType="Time")]
		public System.Nullable<System.TimeSpan> SundayTo
		{
			get
			{
				return this._SundayTo;
			}
			set
			{
				if ((this._SundayTo != value))
				{
					this.OnSundayToChanging(value);
					this.SendPropertyChanging();
					this._SundayTo = value;
					this.SendPropertyChanged("SundayTo");
					this.OnSundayToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Applied", Storage="_Applieds", ThisKey="Application_ID", OtherKey="Application_ID")]
		public EntitySet<Applied> Applieds
		{
			get
			{
				return this._Applieds;
			}
			set
			{
				this._Applieds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applieds(Applied entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Applieds(Applied entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Applied")]
	public partial class Applied : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Applied_ID;
		
		private int _Applicant_ID;
		
		private int _Application_ID;
		
		private int _Job_ID;
		
		private System.DateTime _DateApplied;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplied_IDChanging(int value);
    partial void OnApplied_IDChanged();
    partial void OnApplicant_IDChanging(int value);
    partial void OnApplicant_IDChanged();
    partial void OnApplication_IDChanging(int value);
    partial void OnApplication_IDChanged();
    partial void OnJob_IDChanging(int value);
    partial void OnJob_IDChanged();
    partial void OnDateAppliedChanging(System.DateTime value);
    partial void OnDateAppliedChanged();
    #endregion
		
		public Applied()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._Application = default(EntityRef<Application>);
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Applied_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Applied_ID
		{
			get
			{
				return this._Applied_ID;
			}
			set
			{
				if ((this._Applied_ID != value))
				{
					this.OnApplied_IDChanging(value);
					this.SendPropertyChanging();
					this._Applied_ID = value;
					this.SendPropertyChanged("Applied_ID");
					this.OnApplied_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Applicant_ID", DbType="Int NOT NULL")]
		public int Applicant_ID
		{
			get
			{
				return this._Applicant_ID;
			}
			set
			{
				if ((this._Applicant_ID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicant_IDChanging(value);
					this.SendPropertyChanging();
					this._Applicant_ID = value;
					this.SendPropertyChanged("Applicant_ID");
					this.OnApplicant_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_ID", DbType="Int NOT NULL")]
		public int Application_ID
		{
			get
			{
				return this._Application_ID;
			}
			set
			{
				if ((this._Application_ID != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplication_IDChanging(value);
					this.SendPropertyChanging();
					this._Application_ID = value;
					this.SendPropertyChanged("Application_ID");
					this.OnApplication_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job_ID", DbType="Int NOT NULL")]
		public int Job_ID
		{
			get
			{
				return this._Job_ID;
			}
			set
			{
				if ((this._Job_ID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJob_IDChanging(value);
					this.SendPropertyChanging();
					this._Job_ID = value;
					this.SendPropertyChanged("Job_ID");
					this.OnJob_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateApplied", DbType="Date NOT NULL")]
		public System.DateTime DateApplied
		{
			get
			{
				return this._DateApplied;
			}
			set
			{
				if ((this._DateApplied != value))
				{
					this.OnDateAppliedChanging(value);
					this.SendPropertyChanging();
					this._DateApplied = value;
					this.SendPropertyChanged("DateApplied");
					this.OnDateAppliedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Applied", Storage="_Applicant", ThisKey="Applicant_ID", OtherKey="Applicant_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.Applieds.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.Applieds.Add(this);
						this._Applicant_ID = value.Applicant_ID;
					}
					else
					{
						this._Applicant_ID = default(int);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Applied", Storage="_Application", ThisKey="Application_ID", OtherKey="Application_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Applieds.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Applieds.Add(this);
						this._Application_ID = value.Application_ID;
					}
					else
					{
						this._Application_ID = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Applied", Storage="_Job", ThisKey="Job_ID", OtherKey="Job_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Applieds.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Applieds.Add(this);
						this._Job_ID = value.Job_ID;
					}
					else
					{
						this._Job_ID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Associate")]
	public partial class Associate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Associate_ID;
		
		private int _Applicant_ID;
		
		private int _Reference_ID;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Title;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<Reference> _Reference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssociate_IDChanging(int value);
    partial void OnAssociate_IDChanged();
    partial void OnApplicant_IDChanging(int value);
    partial void OnApplicant_IDChanged();
    partial void OnReference_IDChanging(int value);
    partial void OnReference_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Associate()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._Reference = default(EntityRef<Reference>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Associate_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Associate_ID
		{
			get
			{
				return this._Associate_ID;
			}
			set
			{
				if ((this._Associate_ID != value))
				{
					this.OnAssociate_IDChanging(value);
					this.SendPropertyChanging();
					this._Associate_ID = value;
					this.SendPropertyChanged("Associate_ID");
					this.OnAssociate_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Applicant_ID", DbType="Int NOT NULL")]
		public int Applicant_ID
		{
			get
			{
				return this._Applicant_ID;
			}
			set
			{
				if ((this._Applicant_ID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicant_IDChanging(value);
					this.SendPropertyChanging();
					this._Applicant_ID = value;
					this.SendPropertyChanged("Applicant_ID");
					this.OnApplicant_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reference_ID", DbType="Int NOT NULL")]
		public int Reference_ID
		{
			get
			{
				return this._Reference_ID;
			}
			set
			{
				if ((this._Reference_ID != value))
				{
					if (this._Reference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReference_IDChanging(value);
					this.SendPropertyChanging();
					this._Reference_ID = value;
					this.SendPropertyChanged("Reference_ID");
					this.OnReference_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Associate", Storage="_Applicant", ThisKey="Applicant_ID", OtherKey="Applicant_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.Associates.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.Associates.Add(this);
						this._Applicant_ID = value.Applicant_ID;
					}
					else
					{
						this._Applicant_ID = default(int);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_Associate", Storage="_Reference", ThisKey="Reference_ID", OtherKey="Reference_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Reference Reference
		{
			get
			{
				return this._Reference.Entity;
			}
			set
			{
				Reference previousValue = this._Reference.Entity;
				if (((previousValue != value) 
							|| (this._Reference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reference.Entity = null;
						previousValue.Associates.Remove(this);
					}
					this._Reference.Entity = value;
					if ((value != null))
					{
						value.Associates.Add(this);
						this._Reference_ID = value.Reference_ID;
					}
					else
					{
						this._Reference_ID = default(int);
					}
					this.SendPropertyChanged("Reference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Education")]
	public partial class Education : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Education_ID;
		
		private int _Applicant_ID;
		
		private int _School_ID;
		
		private System.Nullable<System.DateTime> _YearsAttendedFrom;
		
		private System.Nullable<System.DateTime> _YearsAttendedTo;
		
		private System.Nullable<byte> _Graduated;
		
		private string _DegreeAndMajor;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEducation_IDChanging(int value);
    partial void OnEducation_IDChanged();
    partial void OnApplicant_IDChanging(int value);
    partial void OnApplicant_IDChanged();
    partial void OnSchool_IDChanging(int value);
    partial void OnSchool_IDChanged();
    partial void OnYearsAttendedFromChanging(System.Nullable<System.DateTime> value);
    partial void OnYearsAttendedFromChanged();
    partial void OnYearsAttendedToChanging(System.Nullable<System.DateTime> value);
    partial void OnYearsAttendedToChanged();
    partial void OnGraduatedChanging(System.Nullable<byte> value);
    partial void OnGraduatedChanged();
    partial void OnDegreeAndMajorChanging(string value);
    partial void OnDegreeAndMajorChanged();
    #endregion
		
		public Education()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Education_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Education_ID
		{
			get
			{
				return this._Education_ID;
			}
			set
			{
				if ((this._Education_ID != value))
				{
					this.OnEducation_IDChanging(value);
					this.SendPropertyChanging();
					this._Education_ID = value;
					this.SendPropertyChanged("Education_ID");
					this.OnEducation_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Applicant_ID", DbType="Int NOT NULL")]
		public int Applicant_ID
		{
			get
			{
				return this._Applicant_ID;
			}
			set
			{
				if ((this._Applicant_ID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicant_IDChanging(value);
					this.SendPropertyChanging();
					this._Applicant_ID = value;
					this.SendPropertyChanged("Applicant_ID");
					this.OnApplicant_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_School_ID", DbType="Int NOT NULL")]
		public int School_ID
		{
			get
			{
				return this._School_ID;
			}
			set
			{
				if ((this._School_ID != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchool_IDChanging(value);
					this.SendPropertyChanging();
					this._School_ID = value;
					this.SendPropertyChanged("School_ID");
					this.OnSchool_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearsAttendedFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> YearsAttendedFrom
		{
			get
			{
				return this._YearsAttendedFrom;
			}
			set
			{
				if ((this._YearsAttendedFrom != value))
				{
					this.OnYearsAttendedFromChanging(value);
					this.SendPropertyChanging();
					this._YearsAttendedFrom = value;
					this.SendPropertyChanged("YearsAttendedFrom");
					this.OnYearsAttendedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearsAttendedTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> YearsAttendedTo
		{
			get
			{
				return this._YearsAttendedTo;
			}
			set
			{
				if ((this._YearsAttendedTo != value))
				{
					this.OnYearsAttendedToChanging(value);
					this.SendPropertyChanging();
					this._YearsAttendedTo = value;
					this.SendPropertyChanged("YearsAttendedTo");
					this.OnYearsAttendedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Graduated", DbType="TinyInt")]
		public System.Nullable<byte> Graduated
		{
			get
			{
				return this._Graduated;
			}
			set
			{
				if ((this._Graduated != value))
				{
					this.OnGraduatedChanging(value);
					this.SendPropertyChanging();
					this._Graduated = value;
					this.SendPropertyChanged("Graduated");
					this.OnGraduatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeAndMajor", DbType="VarChar(255)")]
		public string DegreeAndMajor
		{
			get
			{
				return this._DegreeAndMajor;
			}
			set
			{
				if ((this._DegreeAndMajor != value))
				{
					this.OnDegreeAndMajorChanging(value);
					this.SendPropertyChanging();
					this._DegreeAndMajor = value;
					this.SendPropertyChanged("DegreeAndMajor");
					this.OnDegreeAndMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Education", Storage="_Applicant", ThisKey="Applicant_ID", OtherKey="Applicant_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.Educations.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.Educations.Add(this);
						this._Applicant_ID = value.Applicant_ID;
					}
					else
					{
						this._Applicant_ID = default(int);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_Education", Storage="_School", ThisKey="School_ID", OtherKey="School_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.Educations.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.Educations.Add(this);
						this._School_ID = value.School_ID;
					}
					else
					{
						this._School_ID = default(int);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employer")]
	public partial class Employer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Employer_ID;
		
		private string _Name;
		
		private string _EmployerAddress;
		
		private string _PhoneNumber;
		
		private EntitySet<Employment> _Employments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployer_IDChanging(int value);
    partial void OnEmployer_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmployerAddressChanging(string value);
    partial void OnEmployerAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Employer()
		{
			this._Employments = new EntitySet<Employment>(new Action<Employment>(this.attach_Employments), new Action<Employment>(this.detach_Employments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Employer_ID
		{
			get
			{
				return this._Employer_ID;
			}
			set
			{
				if ((this._Employer_ID != value))
				{
					this.OnEmployer_IDChanging(value);
					this.SendPropertyChanging();
					this._Employer_ID = value;
					this.SendPropertyChanged("Employer_ID");
					this.OnEmployer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerAddress", DbType="VarChar(255)")]
		public string EmployerAddress
		{
			get
			{
				return this._EmployerAddress;
			}
			set
			{
				if ((this._EmployerAddress != value))
				{
					this.OnEmployerAddressChanging(value);
					this.SendPropertyChanging();
					this._EmployerAddress = value;
					this.SendPropertyChanged("EmployerAddress");
					this.OnEmployerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employer_Employment", Storage="_Employments", ThisKey="Employer_ID", OtherKey="Employer_ID")]
		public EntitySet<Employment> Employments
		{
			get
			{
				return this._Employments;
			}
			set
			{
				this._Employments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employments(Employment entity)
		{
			this.SendPropertyChanging();
			entity.Employer = this;
		}
		
		private void detach_Employments(Employment entity)
		{
			this.SendPropertyChanging();
			entity.Employer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employment")]
	public partial class Employment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Employment_ID;
		
		private int _Applicant_ID;
		
		private int _Employer_ID;
		
		private System.Nullable<byte> _MayWeContactCurrentEmployer;
		
		private System.Nullable<System.DateTime> _EmployedFrom;
		
		private System.Nullable<System.DateTime> _EmployedTo;
		
		private string _Supervisor;
		
		private string _Position;
		
		private string _StartingSalary;
		
		private string _EndingSalary;
		
		private string _ReasonForLeaving;
		
		private string _Responsibilities;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<Employer> _Employer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployment_IDChanging(int value);
    partial void OnEmployment_IDChanged();
    partial void OnApplicant_IDChanging(int value);
    partial void OnApplicant_IDChanged();
    partial void OnEmployer_IDChanging(int value);
    partial void OnEmployer_IDChanged();
    partial void OnMayWeContactCurrentEmployerChanging(System.Nullable<byte> value);
    partial void OnMayWeContactCurrentEmployerChanged();
    partial void OnEmployedFromChanging(System.Nullable<System.DateTime> value);
    partial void OnEmployedFromChanged();
    partial void OnEmployedToChanging(System.Nullable<System.DateTime> value);
    partial void OnEmployedToChanged();
    partial void OnSupervisorChanging(string value);
    partial void OnSupervisorChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnStartingSalaryChanging(string value);
    partial void OnStartingSalaryChanged();
    partial void OnEndingSalaryChanging(string value);
    partial void OnEndingSalaryChanged();
    partial void OnReasonForLeavingChanging(string value);
    partial void OnReasonForLeavingChanged();
    partial void OnResponsibilitiesChanging(string value);
    partial void OnResponsibilitiesChanged();
    #endregion
		
		public Employment()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._Employer = default(EntityRef<Employer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Employment_ID
		{
			get
			{
				return this._Employment_ID;
			}
			set
			{
				if ((this._Employment_ID != value))
				{
					this.OnEmployment_IDChanging(value);
					this.SendPropertyChanging();
					this._Employment_ID = value;
					this.SendPropertyChanged("Employment_ID");
					this.OnEmployment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Applicant_ID", DbType="Int NOT NULL")]
		public int Applicant_ID
		{
			get
			{
				return this._Applicant_ID;
			}
			set
			{
				if ((this._Applicant_ID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicant_IDChanging(value);
					this.SendPropertyChanging();
					this._Applicant_ID = value;
					this.SendPropertyChanged("Applicant_ID");
					this.OnApplicant_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employer_ID", DbType="Int NOT NULL")]
		public int Employer_ID
		{
			get
			{
				return this._Employer_ID;
			}
			set
			{
				if ((this._Employer_ID != value))
				{
					if (this._Employer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployer_IDChanging(value);
					this.SendPropertyChanging();
					this._Employer_ID = value;
					this.SendPropertyChanged("Employer_ID");
					this.OnEmployer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MayWeContactCurrentEmployer", DbType="TinyInt")]
		public System.Nullable<byte> MayWeContactCurrentEmployer
		{
			get
			{
				return this._MayWeContactCurrentEmployer;
			}
			set
			{
				if ((this._MayWeContactCurrentEmployer != value))
				{
					this.OnMayWeContactCurrentEmployerChanging(value);
					this.SendPropertyChanging();
					this._MayWeContactCurrentEmployer = value;
					this.SendPropertyChanged("MayWeContactCurrentEmployer");
					this.OnMayWeContactCurrentEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployedFrom", DbType="Date")]
		public System.Nullable<System.DateTime> EmployedFrom
		{
			get
			{
				return this._EmployedFrom;
			}
			set
			{
				if ((this._EmployedFrom != value))
				{
					this.OnEmployedFromChanging(value);
					this.SendPropertyChanging();
					this._EmployedFrom = value;
					this.SendPropertyChanged("EmployedFrom");
					this.OnEmployedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployedTo", DbType="Date")]
		public System.Nullable<System.DateTime> EmployedTo
		{
			get
			{
				return this._EmployedTo;
			}
			set
			{
				if ((this._EmployedTo != value))
				{
					this.OnEmployedToChanging(value);
					this.SendPropertyChanging();
					this._EmployedTo = value;
					this.SendPropertyChanged("EmployedTo");
					this.OnEmployedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supervisor", DbType="VarChar(255)")]
		public string Supervisor
		{
			get
			{
				return this._Supervisor;
			}
			set
			{
				if ((this._Supervisor != value))
				{
					this.OnSupervisorChanging(value);
					this.SendPropertyChanging();
					this._Supervisor = value;
					this.SendPropertyChanged("Supervisor");
					this.OnSupervisorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(255)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingSalary", DbType="VarChar(255)")]
		public string StartingSalary
		{
			get
			{
				return this._StartingSalary;
			}
			set
			{
				if ((this._StartingSalary != value))
				{
					this.OnStartingSalaryChanging(value);
					this.SendPropertyChanging();
					this._StartingSalary = value;
					this.SendPropertyChanged("StartingSalary");
					this.OnStartingSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingSalary", DbType="VarChar(255)")]
		public string EndingSalary
		{
			get
			{
				return this._EndingSalary;
			}
			set
			{
				if ((this._EndingSalary != value))
				{
					this.OnEndingSalaryChanging(value);
					this.SendPropertyChanging();
					this._EndingSalary = value;
					this.SendPropertyChanged("EndingSalary");
					this.OnEndingSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonForLeaving", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ReasonForLeaving
		{
			get
			{
				return this._ReasonForLeaving;
			}
			set
			{
				if ((this._ReasonForLeaving != value))
				{
					this.OnReasonForLeavingChanging(value);
					this.SendPropertyChanging();
					this._ReasonForLeaving = value;
					this.SendPropertyChanged("ReasonForLeaving");
					this.OnReasonForLeavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Responsibilities", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Responsibilities
		{
			get
			{
				return this._Responsibilities;
			}
			set
			{
				if ((this._Responsibilities != value))
				{
					this.OnResponsibilitiesChanging(value);
					this.SendPropertyChanging();
					this._Responsibilities = value;
					this.SendPropertyChanged("Responsibilities");
					this.OnResponsibilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Employment", Storage="_Applicant", ThisKey="Applicant_ID", OtherKey="Applicant_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.Employments.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.Employments.Add(this);
						this._Applicant_ID = value.Applicant_ID;
					}
					else
					{
						this._Applicant_ID = default(int);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employer_Employment", Storage="_Employer", ThisKey="Employer_ID", OtherKey="Employer_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employer Employer
		{
			get
			{
				return this._Employer.Entity;
			}
			set
			{
				Employer previousValue = this._Employer.Entity;
				if (((previousValue != value) 
							|| (this._Employer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employer.Entity = null;
						previousValue.Employments.Remove(this);
					}
					this._Employer.Entity = value;
					if ((value != null))
					{
						value.Employments.Add(this);
						this._Employer_ID = value.Employer_ID;
					}
					else
					{
						this._Employer_ID = default(int);
					}
					this.SendPropertyChanged("Employer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expertise")]
	public partial class Expertise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Expertise_ID;
		
		private int _Applicant_ID;
		
		private int _Skill_ID;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<Skill> _Skill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExpertise_IDChanging(int value);
    partial void OnExpertise_IDChanged();
    partial void OnApplicant_IDChanging(int value);
    partial void OnApplicant_IDChanged();
    partial void OnSkill_IDChanging(int value);
    partial void OnSkill_IDChanged();
    #endregion
		
		public Expertise()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._Skill = default(EntityRef<Skill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expertise_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Expertise_ID
		{
			get
			{
				return this._Expertise_ID;
			}
			set
			{
				if ((this._Expertise_ID != value))
				{
					this.OnExpertise_IDChanging(value);
					this.SendPropertyChanging();
					this._Expertise_ID = value;
					this.SendPropertyChanged("Expertise_ID");
					this.OnExpertise_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Applicant_ID", DbType="Int NOT NULL")]
		public int Applicant_ID
		{
			get
			{
				return this._Applicant_ID;
			}
			set
			{
				if ((this._Applicant_ID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicant_IDChanging(value);
					this.SendPropertyChanging();
					this._Applicant_ID = value;
					this.SendPropertyChanged("Applicant_ID");
					this.OnApplicant_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skill_ID", DbType="Int NOT NULL")]
		public int Skill_ID
		{
			get
			{
				return this._Skill_ID;
			}
			set
			{
				if ((this._Skill_ID != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkill_IDChanging(value);
					this.SendPropertyChanging();
					this._Skill_ID = value;
					this.SendPropertyChanged("Skill_ID");
					this.OnSkill_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_Expertise", Storage="_Applicant", ThisKey="Applicant_ID", OtherKey="Applicant_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.Expertises.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.Expertises.Add(this);
						this._Applicant_ID = value.Applicant_ID;
					}
					else
					{
						this._Applicant_ID = default(int);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Expertise", Storage="_Skill", ThisKey="Skill_ID", OtherKey="Skill_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.Expertises.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.Expertises.Add(this);
						this._Skill_ID = value.Skill_ID;
					}
					else
					{
						this._Skill_ID = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Job_ID;
		
		private string _Title;
		
		private EntitySet<Applied> _Applieds;
		
		private EntitySet<JobOpening> _JobOpenings;
		
		private EntitySet<JobRequirement> _JobRequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJob_IDChanging(int value);
    partial void OnJob_IDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Job()
		{
			this._Applieds = new EntitySet<Applied>(new Action<Applied>(this.attach_Applieds), new Action<Applied>(this.detach_Applieds));
			this._JobOpenings = new EntitySet<JobOpening>(new Action<JobOpening>(this.attach_JobOpenings), new Action<JobOpening>(this.detach_JobOpenings));
			this._JobRequirements = new EntitySet<JobRequirement>(new Action<JobRequirement>(this.attach_JobRequirements), new Action<JobRequirement>(this.detach_JobRequirements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Job_ID
		{
			get
			{
				return this._Job_ID;
			}
			set
			{
				if ((this._Job_ID != value))
				{
					this.OnJob_IDChanging(value);
					this.SendPropertyChanging();
					this._Job_ID = value;
					this.SendPropertyChanged("Job_ID");
					this.OnJob_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Applied", Storage="_Applieds", ThisKey="Job_ID", OtherKey="Job_ID")]
		public EntitySet<Applied> Applieds
		{
			get
			{
				return this._Applieds;
			}
			set
			{
				this._Applieds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobOpening", Storage="_JobOpenings", ThisKey="Job_ID", OtherKey="Job_ID")]
		public EntitySet<JobOpening> JobOpenings
		{
			get
			{
				return this._JobOpenings;
			}
			set
			{
				this._JobOpenings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobRequirement", Storage="_JobRequirements", ThisKey="Job_ID", OtherKey="Job_ID")]
		public EntitySet<JobRequirement> JobRequirements
		{
			get
			{
				return this._JobRequirements;
			}
			set
			{
				this._JobRequirements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applieds(Applied entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Applieds(Applied entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_JobOpenings(JobOpening entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobOpenings(JobOpening entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_JobRequirements(JobRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobRequirements(JobRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobOpening")]
	public partial class JobOpening : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobOpening_ID;
		
		private System.DateTime _OpenDate;
		
		private int _Job_ID;
		
		private EntitySet<Store> _Stores;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobOpening_IDChanging(int value);
    partial void OnJobOpening_IDChanged();
    partial void OnOpenDateChanging(System.DateTime value);
    partial void OnOpenDateChanged();
    partial void OnJob_IDChanging(int value);
    partial void OnJob_IDChanged();
    #endregion
		
		public JobOpening()
		{
			this._Stores = new EntitySet<Store>(new Action<Store>(this.attach_Stores), new Action<Store>(this.detach_Stores));
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobOpening_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobOpening_ID
		{
			get
			{
				return this._JobOpening_ID;
			}
			set
			{
				if ((this._JobOpening_ID != value))
				{
					this.OnJobOpening_IDChanging(value);
					this.SendPropertyChanging();
					this._JobOpening_ID = value;
					this.SendPropertyChanged("JobOpening_ID");
					this.OnJobOpening_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenDate", DbType="Date NOT NULL")]
		public System.DateTime OpenDate
		{
			get
			{
				return this._OpenDate;
			}
			set
			{
				if ((this._OpenDate != value))
				{
					this.OnOpenDateChanging(value);
					this.SendPropertyChanging();
					this._OpenDate = value;
					this.SendPropertyChanged("OpenDate");
					this.OnOpenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job_ID", DbType="Int NOT NULL")]
		public int Job_ID
		{
			get
			{
				return this._Job_ID;
			}
			set
			{
				if ((this._Job_ID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJob_IDChanging(value);
					this.SendPropertyChanging();
					this._Job_ID = value;
					this.SendPropertyChanged("Job_ID");
					this.OnJob_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOpening_Store", Storage="_Stores", ThisKey="JobOpening_ID", OtherKey="JobOpening_ID")]
		public EntitySet<Store> Stores
		{
			get
			{
				return this._Stores;
			}
			set
			{
				this._Stores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobOpening", Storage="_Job", ThisKey="Job_ID", OtherKey="Job_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobOpenings.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobOpenings.Add(this);
						this._Job_ID = value.Job_ID;
					}
					else
					{
						this._Job_ID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.JobOpening = this;
		}
		
		private void detach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.JobOpening = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobRequirement")]
	public partial class JobRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobRequirement_ID;
		
		private int _Job_ID;
		
		private int _Skill_ID;
		
		private string _Notes;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Skill> _Skill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobRequirement_IDChanging(int value);
    partial void OnJobRequirement_IDChanged();
    partial void OnJob_IDChanging(int value);
    partial void OnJob_IDChanged();
    partial void OnSkill_IDChanging(int value);
    partial void OnSkill_IDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public JobRequirement()
		{
			this._Job = default(EntityRef<Job>);
			this._Skill = default(EntityRef<Skill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobRequirement_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobRequirement_ID
		{
			get
			{
				return this._JobRequirement_ID;
			}
			set
			{
				if ((this._JobRequirement_ID != value))
				{
					this.OnJobRequirement_IDChanging(value);
					this.SendPropertyChanging();
					this._JobRequirement_ID = value;
					this.SendPropertyChanged("JobRequirement_ID");
					this.OnJobRequirement_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job_ID", DbType="Int NOT NULL")]
		public int Job_ID
		{
			get
			{
				return this._Job_ID;
			}
			set
			{
				if ((this._Job_ID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJob_IDChanging(value);
					this.SendPropertyChanging();
					this._Job_ID = value;
					this.SendPropertyChanged("Job_ID");
					this.OnJob_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skill_ID", DbType="Int NOT NULL")]
		public int Skill_ID
		{
			get
			{
				return this._Skill_ID;
			}
			set
			{
				if ((this._Skill_ID != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkill_IDChanging(value);
					this.SendPropertyChanging();
					this._Skill_ID = value;
					this.SendPropertyChanged("Skill_ID");
					this.OnSkill_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(20)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobRequirement", Storage="_Job", ThisKey="Job_ID", OtherKey="Job_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobRequirements.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobRequirements.Add(this);
						this._Job_ID = value.Job_ID;
					}
					else
					{
						this._Job_ID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_JobRequirement", Storage="_Skill", ThisKey="Skill_ID", OtherKey="Skill_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.JobRequirements.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.JobRequirements.Add(this);
						this._Skill_ID = value.Skill_ID;
					}
					else
					{
						this._Skill_ID = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reference")]
	public partial class Reference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Reference_ID;
		
		private System.Nullable<int> _YearsKnown;
		
		private EntitySet<Associate> _Associates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReference_IDChanging(int value);
    partial void OnReference_IDChanged();
    partial void OnYearsKnownChanging(System.Nullable<int> value);
    partial void OnYearsKnownChanged();
    #endregion
		
		public Reference()
		{
			this._Associates = new EntitySet<Associate>(new Action<Associate>(this.attach_Associates), new Action<Associate>(this.detach_Associates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reference_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Reference_ID
		{
			get
			{
				return this._Reference_ID;
			}
			set
			{
				if ((this._Reference_ID != value))
				{
					this.OnReference_IDChanging(value);
					this.SendPropertyChanging();
					this._Reference_ID = value;
					this.SendPropertyChanged("Reference_ID");
					this.OnReference_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearsKnown", DbType="Int")]
		public System.Nullable<int> YearsKnown
		{
			get
			{
				return this._YearsKnown;
			}
			set
			{
				if ((this._YearsKnown != value))
				{
					this.OnYearsKnownChanging(value);
					this.SendPropertyChanging();
					this._YearsKnown = value;
					this.SendPropertyChanged("YearsKnown");
					this.OnYearsKnownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_Associate", Storage="_Associates", ThisKey="Reference_ID", OtherKey="Reference_ID")]
		public EntitySet<Associate> Associates
		{
			get
			{
				return this._Associates;
			}
			set
			{
				this._Associates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Associates(Associate entity)
		{
			this.SendPropertyChanging();
			entity.Reference = this;
		}
		
		private void detach_Associates(Associate entity)
		{
			this.SendPropertyChanging();
			entity.Reference = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.School")]
	public partial class School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _School_ID;
		
		private string _School_Name;
		
		private string _School_Address;
		
		private EntitySet<Education> _Educations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchool_IDChanging(int value);
    partial void OnSchool_IDChanged();
    partial void OnSchool_NameChanging(string value);
    partial void OnSchool_NameChanged();
    partial void OnSchool_AddressChanging(string value);
    partial void OnSchool_AddressChanged();
    #endregion
		
		public School()
		{
			this._Educations = new EntitySet<Education>(new Action<Education>(this.attach_Educations), new Action<Education>(this.detach_Educations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_School_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int School_ID
		{
			get
			{
				return this._School_ID;
			}
			set
			{
				if ((this._School_ID != value))
				{
					this.OnSchool_IDChanging(value);
					this.SendPropertyChanging();
					this._School_ID = value;
					this.SendPropertyChanged("School_ID");
					this.OnSchool_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_School_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string School_Name
		{
			get
			{
				return this._School_Name;
			}
			set
			{
				if ((this._School_Name != value))
				{
					this.OnSchool_NameChanging(value);
					this.SendPropertyChanging();
					this._School_Name = value;
					this.SendPropertyChanged("School_Name");
					this.OnSchool_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_School_Address", DbType="VarChar(255)")]
		public string School_Address
		{
			get
			{
				return this._School_Address;
			}
			set
			{
				if ((this._School_Address != value))
				{
					this.OnSchool_AddressChanging(value);
					this.SendPropertyChanging();
					this._School_Address = value;
					this.SendPropertyChanged("School_Address");
					this.OnSchool_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_Education", Storage="_Educations", ThisKey="School_ID", OtherKey="School_ID")]
		public EntitySet<Education> Educations
		{
			get
			{
				return this._Educations;
			}
			set
			{
				this._Educations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skill")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Skill_ID;
		
		private string _SkillName;
		
		private EntitySet<Expertise> _Expertises;
		
		private EntitySet<JobRequirement> _JobRequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSkill_IDChanging(int value);
    partial void OnSkill_IDChanged();
    partial void OnSkillNameChanging(string value);
    partial void OnSkillNameChanged();
    #endregion
		
		public Skill()
		{
			this._Expertises = new EntitySet<Expertise>(new Action<Expertise>(this.attach_Expertises), new Action<Expertise>(this.detach_Expertises));
			this._JobRequirements = new EntitySet<JobRequirement>(new Action<JobRequirement>(this.attach_JobRequirements), new Action<JobRequirement>(this.detach_JobRequirements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skill_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Skill_ID
		{
			get
			{
				return this._Skill_ID;
			}
			set
			{
				if ((this._Skill_ID != value))
				{
					this.OnSkill_IDChanging(value);
					this.SendPropertyChanging();
					this._Skill_ID = value;
					this.SendPropertyChanged("Skill_ID");
					this.OnSkill_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SkillName
		{
			get
			{
				return this._SkillName;
			}
			set
			{
				if ((this._SkillName != value))
				{
					this.OnSkillNameChanging(value);
					this.SendPropertyChanging();
					this._SkillName = value;
					this.SendPropertyChanged("SkillName");
					this.OnSkillNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Expertise", Storage="_Expertises", ThisKey="Skill_ID", OtherKey="Skill_ID")]
		public EntitySet<Expertise> Expertises
		{
			get
			{
				return this._Expertises;
			}
			set
			{
				this._Expertises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_JobRequirement", Storage="_JobRequirements", ThisKey="Skill_ID", OtherKey="Skill_ID")]
		public EntitySet<JobRequirement> JobRequirements
		{
			get
			{
				return this._JobRequirements;
			}
			set
			{
				this._JobRequirements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Expertises(Expertise entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_Expertises(Expertise entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
		
		private void attach_JobRequirements(JobRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_JobRequirements(JobRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Store")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Store_ID;
		
		private string _Location;
		
		private int _Manager_ID;
		
		private int _JobOpening_ID;
		
		private EntityRef<JobOpening> _JobOpening;
		
		private EntityRef<StoreManager> _StoreManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStore_IDChanging(int value);
    partial void OnStore_IDChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnManager_IDChanging(int value);
    partial void OnManager_IDChanged();
    partial void OnJobOpening_IDChanging(int value);
    partial void OnJobOpening_IDChanged();
    #endregion
		
		public Store()
		{
			this._JobOpening = default(EntityRef<JobOpening>);
			this._StoreManager = default(EntityRef<StoreManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Store_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Store_ID
		{
			get
			{
				return this._Store_ID;
			}
			set
			{
				if ((this._Store_ID != value))
				{
					this.OnStore_IDChanging(value);
					this.SendPropertyChanging();
					this._Store_ID = value;
					this.SendPropertyChanged("Store_ID");
					this.OnStore_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_ID", DbType="Int NOT NULL")]
		public int Manager_ID
		{
			get
			{
				return this._Manager_ID;
			}
			set
			{
				if ((this._Manager_ID != value))
				{
					if (this._StoreManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManager_IDChanging(value);
					this.SendPropertyChanging();
					this._Manager_ID = value;
					this.SendPropertyChanged("Manager_ID");
					this.OnManager_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobOpening_ID", DbType="Int NOT NULL")]
		public int JobOpening_ID
		{
			get
			{
				return this._JobOpening_ID;
			}
			set
			{
				if ((this._JobOpening_ID != value))
				{
					if (this._JobOpening.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobOpening_IDChanging(value);
					this.SendPropertyChanging();
					this._JobOpening_ID = value;
					this.SendPropertyChanged("JobOpening_ID");
					this.OnJobOpening_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOpening_Store", Storage="_JobOpening", ThisKey="JobOpening_ID", OtherKey="JobOpening_ID", IsForeignKey=true)]
		public JobOpening JobOpening
		{
			get
			{
				return this._JobOpening.Entity;
			}
			set
			{
				JobOpening previousValue = this._JobOpening.Entity;
				if (((previousValue != value) 
							|| (this._JobOpening.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobOpening.Entity = null;
						previousValue.Stores.Remove(this);
					}
					this._JobOpening.Entity = value;
					if ((value != null))
					{
						value.Stores.Add(this);
						this._JobOpening_ID = value.JobOpening_ID;
					}
					else
					{
						this._JobOpening_ID = default(int);
					}
					this.SendPropertyChanged("JobOpening");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreManager_Store", Storage="_StoreManager", ThisKey="Manager_ID", OtherKey="StoreManager_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StoreManager StoreManager
		{
			get
			{
				return this._StoreManager.Entity;
			}
			set
			{
				StoreManager previousValue = this._StoreManager.Entity;
				if (((previousValue != value) 
							|| (this._StoreManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreManager.Entity = null;
						previousValue.Stores.Remove(this);
					}
					this._StoreManager.Entity = value;
					if ((value != null))
					{
						value.Stores.Add(this);
						this._Manager_ID = value.StoreManager_ID;
					}
					else
					{
						this._Manager_ID = default(int);
					}
					this.SendPropertyChanged("StoreManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreManager")]
	public partial class StoreManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoreManager_ID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Phone;
		
		private EntitySet<Store> _Stores;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoreManager_IDChanging(int value);
    partial void OnStoreManager_IDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public StoreManager()
		{
			this._Stores = new EntitySet<Store>(new Action<Store>(this.attach_Stores), new Action<Store>(this.detach_Stores));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreManager_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StoreManager_ID
		{
			get
			{
				return this._StoreManager_ID;
			}
			set
			{
				if ((this._StoreManager_ID != value))
				{
					this.OnStoreManager_IDChanging(value);
					this.SendPropertyChanging();
					this._StoreManager_ID = value;
					this.SendPropertyChanged("StoreManager_ID");
					this.OnStoreManager_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreManager_Store", Storage="_Stores", ThisKey="StoreManager_ID", OtherKey="Manager_ID")]
		public EntitySet<Store> Stores
		{
			get
			{
				return this._Stores;
			}
			set
			{
				this._Stores.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.StoreManager = this;
		}
		
		private void detach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.StoreManager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private EntitySet<webpages_UsersInRole> _webpages_UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public UserProfile()
		{
			this._webpages_UsersInRoles = new EntitySet<webpages_UsersInRole>(new Action<webpages_UsersInRole>(this.attach_webpages_UsersInRoles), new Action<webpages_UsersInRole>(this.detach_webpages_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(MAX)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_webpages_UsersInRole", Storage="_webpages_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this._webpages_UsersInRoles;
			}
			set
			{
				this._webpages_UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Membership")]
	public partial class webpages_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _ConfirmationToken;
		
		private System.Nullable<bool> _IsConfirmed;
		
		private System.Nullable<System.DateTime> _LastPasswordFailureDate;
		
		private int _PasswordFailuresSinceLastSuccess;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _PasswordChangedDate;
		
		private string _PasswordSalt;
		
		private string _PasswordVerificationToken;
		
		private System.Nullable<System.DateTime> _PasswordVerificationTokenExpirationDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnConfirmationTokenChanging(string value);
    partial void OnConfirmationTokenChanged();
    partial void OnIsConfirmedChanging(System.Nullable<bool> value);
    partial void OnIsConfirmedChanged();
    partial void OnLastPasswordFailureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPasswordFailureDateChanged();
    partial void OnPasswordFailuresSinceLastSuccessChanging(int value);
    partial void OnPasswordFailuresSinceLastSuccessChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordChangedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordChangedDateChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnPasswordVerificationTokenChanging(string value);
    partial void OnPasswordVerificationTokenChanged();
    partial void OnPasswordVerificationTokenExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordVerificationTokenExpirationDateChanged();
    #endregion
		
		public webpages_Membership()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmationToken", DbType="NVarChar(128)")]
		public string ConfirmationToken
		{
			get
			{
				return this._ConfirmationToken;
			}
			set
			{
				if ((this._ConfirmationToken != value))
				{
					this.OnConfirmationTokenChanging(value);
					this.SendPropertyChanging();
					this._ConfirmationToken = value;
					this.SendPropertyChanged("ConfirmationToken");
					this.OnConfirmationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConfirmed", DbType="Bit")]
		public System.Nullable<bool> IsConfirmed
		{
			get
			{
				return this._IsConfirmed;
			}
			set
			{
				if ((this._IsConfirmed != value))
				{
					this.OnIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsConfirmed = value;
					this.SendPropertyChanged("IsConfirmed");
					this.OnIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordFailureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPasswordFailureDate
		{
			get
			{
				return this._LastPasswordFailureDate;
			}
			set
			{
				if ((this._LastPasswordFailureDate != value))
				{
					this.OnLastPasswordFailureDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordFailureDate = value;
					this.SendPropertyChanged("LastPasswordFailureDate");
					this.OnLastPasswordFailureDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFailuresSinceLastSuccess", DbType="Int NOT NULL")]
		public int PasswordFailuresSinceLastSuccess
		{
			get
			{
				return this._PasswordFailuresSinceLastSuccess;
			}
			set
			{
				if ((this._PasswordFailuresSinceLastSuccess != value))
				{
					this.OnPasswordFailuresSinceLastSuccessChanging(value);
					this.SendPropertyChanging();
					this._PasswordFailuresSinceLastSuccess = value;
					this.SendPropertyChanged("PasswordFailuresSinceLastSuccess");
					this.OnPasswordFailuresSinceLastSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordChangedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordChangedDate
		{
			get
			{
				return this._PasswordChangedDate;
			}
			set
			{
				if ((this._PasswordChangedDate != value))
				{
					this.OnPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordChangedDate = value;
					this.SendPropertyChanged("PasswordChangedDate");
					this.OnPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordVerificationToken", DbType="NVarChar(128)")]
		public string PasswordVerificationToken
		{
			get
			{
				return this._PasswordVerificationToken;
			}
			set
			{
				if ((this._PasswordVerificationToken != value))
				{
					this.OnPasswordVerificationTokenChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerificationToken = value;
					this.SendPropertyChanged("PasswordVerificationToken");
					this.OnPasswordVerificationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordVerificationTokenExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordVerificationTokenExpirationDate
		{
			get
			{
				return this._PasswordVerificationTokenExpirationDate;
			}
			set
			{
				if ((this._PasswordVerificationTokenExpirationDate != value))
				{
					this.OnPasswordVerificationTokenExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerificationTokenExpirationDate = value;
					this.SendPropertyChanged("PasswordVerificationTokenExpirationDate");
					this.OnPasswordVerificationTokenExpirationDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_OAuthMembership")]
	public partial class webpages_OAuthMembership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Provider;
		
		private string _ProviderUserId;
		
		private int _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnProviderUserIdChanging(string value);
    partial void OnProviderUserIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public webpages_OAuthMembership()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderUserId", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderUserId
		{
			get
			{
				return this._ProviderUserId;
			}
			set
			{
				if ((this._ProviderUserId != value))
				{
					this.OnProviderUserIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderUserId = value;
					this.SendPropertyChanged("ProviderUserId");
					this.OnProviderUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Roles")]
	public partial class webpages_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private EntitySet<webpages_UsersInRole> _webpages_UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public webpages_Role()
		{
			this._webpages_UsersInRoles = new EntitySet<webpages_UsersInRole>(new Action<webpages_UsersInRole>(this.attach_webpages_UsersInRoles), new Action<webpages_UsersInRole>(this.detach_webpages_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="webpages_Role_webpages_UsersInRole", Storage="_webpages_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this._webpages_UsersInRoles;
			}
			set
			{
				this._webpages_UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.webpages_Role = this;
		}
		
		private void detach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.webpages_Role = null;
		}
	}
}
#pragma warning restore 1591
